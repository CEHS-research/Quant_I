[
["usu-psy-6600-or-educ-6600.html", "Explaining Psychological Statistcs USU: PSY 6600 -or- EDUC 6600 Software Programs R Packages Kniting Notebooks", " Explaining Psychological Statistcs A Compantion in R Dr. Sarah Schwartz and Dr. Tyson Barrett Updated Last: February 27 2018 USU: PSY 6600 -or- EDUC 6600 Utah State University Emma Eccles Jones College of Education and Human Services This book is a compantion for the course text book: Cohen Textbook The textbook is available through the USU library View and read it online for free You must be either on campus or on the VPN You will need to log-on with your A-number and password Download the entire book for free requires you to create an account with your A-number download/install some software only can be ‘checked out’ for 14 days Course Files All files may be downloaded from the BOX folder Icons and image files (png or jpg) Datasets (excel or SPSS format) Assignments (pdf and Rmd) Instructor Websites Sarah’s website: www.sarahschwartzstats.com Tyson’s website: www.tysonbarrett.com/teaching/ Course Schedule For Spring Semester 2018 # COMPUTER PREPARATION {-} What is R? R is a language and environment for statistical computing and graphics. (R Core Team 2017) R provides a wide variety of statistical (linear and nonlinear modelling, classical statistical tests, time-series analysis, classification, clustering, …) and graphical techniques, and is highly extensible. The S language is often the vehicle of choice for research in statistical methodology, and R provides an Open Source route to participation in that activity. One of R’s strengths is the ease with which well-designed publication-quality plots can be produced, including mathematical symbols and formulae where needed. Great care has been taken over the defaults for the minor design choices in graphics, but the user retains full control. What is R Markdown? According to R Studio: &gt; “R Markdown is a format that enables easy authoring of reproducible web reports from R. It combines the core syntax of Markdown (an easy-to-write plain text format for web content) with embedded R code chunks that are run so their output can be included in the final document”. Dynamic Reporting From Penn State Statistics: The traditional way** to write a report** Run your analysis in software, like SPSS or R and manually save our output i.e. saving the ANOVA table or using pdf() to save the graphs Type your your description and interpretation in a text editor like Word either drag/drop tables and figures, or worse copy-paste and retype all the numbers A report written in this way can be problematic. For instance, imagine your Mentor/collaborator/journal reviewer telling you that they want to use a sub-sample instead of the entire sample. Or to include a nother variable. You would have to redo all of your work!! Therefore, in this way dynamic also means reproducible, in the sense that people who get the file from you can reproduce the entire work in the report. How does R Markdown work out to be a .pdf or .html file? R Markdown is a file with the file extension .Rmd, the knitr package will then transform the file into a Markdown file with the extension .md. Then Rstudio can (Xie 2015): Use LaTeX to transform the file into a .pdf Load another package called markdown to transform the file into .html Use Pandoc to even convert to file to a Word document (ugly) Is this a popular** method for creating reports?** Check out Rpubs. This website shares lots of documents written in the way we will introduce below. R Markdown documents are fully reproducible. Use a productive notebook interface to weave together narrative text and code to produce elegantly formatted output. Use multiple languages including R, Python, and SQL (Allaire et al. 2017). knitr is an engine for dynamic report generation with R. It is a package in the statistical programming language R that enables integration of R code into LaTeX, LyX, HTML, Markdown, AsciiDoc, and text documents (Xie 2017b). Software Programs You will need to download and install THREE programs to create dynamic reports in. 1. R from www.r-project.org Get the latest released version of FREE Base R from CRAN Choose a mirror close to your location Select base R for your computer (Windows, Mac, ect.) The defaults are good…don’t change them…just keep clicking ‘Next’ 2 R Studio from www.rstudio.com Get the latest version of the FREE Open Source Desktop Edition of R Studio The defaults are good…don’t change them…just keep clicking ‘Next’ 3. LaTeX depends on your operating system Mac: MacTeX from http://tug.org/mactex/ Download (5+ min) to a folder and them double click on the PKG file Follow the installation instructions. You don’t need to open anything after MacTeX is finished installing. Windows: MikTeX http://miktex.org/download Pick the latest version of the Net Installer, not the Basic! You need the full version 64-bit is better, if you have a 64-bit machine When your download is complete, run the downloaded installer. Windows may ask you if you want to “allow this app from an unknown publisher to make changes to your PC”. If it does, make sure to click Yes! This is the slowest part… R Packages R packages are collections of functions and data sets developed by the community. They increase the power of R by improving existing base R functionalities, or by adding new ones. More information may be found here: https://www.datacamp.com/community/tutorials/r-packages-guide 0.0.1 Packages You Need! The followin packages are used in this course and throught this document: tidyverse (Wickham 2017) dplyr (Wickham et al. 2017) tibble (Muller and Wickham 2017) tidyr (Wickham and Henry 2017) readxl (Wickham and Bryan 2017) haven (Wickham and Miller 2017) ggplot2 (Wickham 2009) furniture (Barrett, Brignone, and Laxman 2018) psych (Revelle 2017) Installing Packages (via the user interface) You only need to install packages ONCE per computer. In R Stuido: Click on the Packages tab the panel with the most tabs Click on the word Instsall just under and to the left of the tab In the Packages box, type in the name of the packages you would like to download. You can do several at once, just seperate them with multiple spaces or a comma. Note: Leave the installation library path as the default. Also, make sure the box for ‘Installing dependencies’ is checked. Load Packages (via code) You will need to load packages in EVERY SESSION you want to use them in. library(tidyverse) Please don’t get confused: library() is the command used to load a package, and it refers to the place where the package is contained, usually a folder on your computer, while a package is the collection of functions bundled conveniently. Maybe it can help a quote from Hadley Wickham, Chief data scientist at RStudio, and instructor of the “Writing functions in R” DataCamp course (December 8, 2014): “a package is a like a book, a library is like a library; you use library() to check a package out of the library” Here is link to an AWSOME ‘cheat sheet’ for begginers working with the tidyverse package. I highly suggest checking it out. More ‘cheat sheets’ are available under the “Help” menu option in R Studio Kniting Notebooks Storing all associated files If you are using any files, such as datasets or images, they need to be stored in the same folder location as the R Notebook (.Rmd file). This folder location must be the Working Directory for the R Studio session. If you opened your .Rmd notebook file by double-clicking on its name, then this should be the case. Setting the working directory To ensure that R Studio knows where to find the files, you can manually set the Working Directory through the menu: Click Session Select Set Working Directory by hovering your mouse over it Click on To Source File Location You can double check that you were successful by Click on the Files tab in the many-tab panel Click on the button with the gear that says More Click Go To Working Directory At this point you should see all the files that reside in the folder location where the open .Rmd files is also saved. "],
["data-prepartion.html", "Chapter 1 DATA PREPARTION 1.1 Preparing the Environment 1.2 Opperators and Helpful Functions 1.3 Data Wrangling", " Chapter 1 DATA PREPARTION Chapter Links Chapter 1 Slide Show Unit 0 Assingment - Write Up Skeleton Unit 0 Assingment - Rmd Skeleton Inho’s Dataset - Excel format 1.1 Preparing the Environment 1.1.1 The library() Function: Load a Package You will need TWO packages: tidyverse Easily Install and Load the ‘Tidy universe’ of packages (Wickham 2017) readxl Read Excel Files (Wickham and Bryan 2017) furniture Nice Tables and Row-wise functions (by Tyson) (Barrett, Brignone, and Laxman 2018) Make sure the packages are installed (Package tab) The function library() checks the package out, or makes it active. library(tidyverse) # Loads several very helpful &#39;tidy&#39; packages library(readxl) # Read in Excel datasets library(furniture) # Nice tables (by our own Tyson Barrett) 1.1.2 The readxl::read_excel() Function: Read in Excel Data Files Make sure the dataset is saved in the same folder as this file Make sure the that folder is the working directory Now we are ready to open the data with the read_excel() function from the readxl package readxl::read_excel() the double colon specifies the package::function() the only thing required inside the () is the quoted name of the Excel file Make sure it is stored in the .Rmd’s folder Make sure to include the file’s extension (.xls) NOTE: a tibble is basically just a “table” of data, the way the tidy-verse represents data sets. read_excel(&quot;Ihno_dataset.xls&quot;) 1.2 Opperators and Helpful Functions 1.2.1 The Assignment Opperator &lt;-: Save things to a name the &lt;- combination of symbols makes assignments tells R to store the dataset as the name it points to this lets us use the dataset later on in another step NOTE: no output is produced when you make an assignment. data &lt;- read_excel(&quot;Ihno_dataset.xls&quot;) Print out the dataset by just typing and running the name you assigned it data # A tibble: 100 x 18 Sub_num Gender Major Reason Exp_cond Coffee Num_cups Phobia Prevmath &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1.00 1.00 1.00 3.00 1.00 1.00 0 1.00 3.00 2 2.00 1.00 1.00 2.00 1.00 0 0 1.00 4.00 3 3.00 1.00 1.00 1.00 1.00 0 0 4.00 1.00 4 4.00 1.00 1.00 1.00 1.00 0 0 4.00 0 5 5.00 1.00 1.00 1.00 1.00 0 1.00 10.0 1.00 6 6.00 1.00 1.00 1.00 2.00 1.00 1.00 4.00 1.00 7 7.00 1.00 1.00 1.00 2.00 0 0 4.00 2.00 8 8.00 1.00 1.00 3.00 2.00 1.00 2.00 4.00 1.00 9 9.00 1.00 1.00 1.00 2.00 0 0 4.00 1.00 10 10.0 1.00 1.00 1.00 2.00 1.00 2.00 5.00 0 # ... with 90 more rows, and 9 more variables: Mathquiz &lt;dbl&gt;, Statquiz # &lt;dbl&gt;, Exp_sqz &lt;dbl&gt;, Hr_base &lt;dbl&gt;, Hr_pre &lt;dbl&gt;, Hr_post &lt;dbl&gt;, # Anx_base &lt;dbl&gt;, Anx_pre &lt;dbl&gt;, Anx_post &lt;dbl&gt; NOTE: The pound or hashtag symbol at the front of a line within an R code chunk designates what follows as a comment and does not try to run the code. #data 1.2.2 The Pipe %&gt;% Opperator: Link Steps Togehter This special set of symbols (no spaces included) signals R to feed what precedes it into what follows it. Its a simple idea that makes code writing in R much easier (Wickham et al. 2017). data &lt;- read_excel(&quot;Ihno_dataset.xls&quot;) %&gt;% dplyr::rename_all(tolower) # convert variable names to lower case data 1.2.3 The head() Function: Print the First Few Rows See the first few rows of a dataset by using the head() function. Since it is part for base R, I never include the package, but if we did, it would be utils::head(). The default is to print the first SIX rows. head(data) # A tibble: 6 x 18 sub_num gender major reason exp_cond coffee num_cups phobia prevmath &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1.00 1.00 1.00 3.00 1.00 1.00 0 1.00 3.00 2 2.00 1.00 1.00 2.00 1.00 0 0 1.00 4.00 3 3.00 1.00 1.00 1.00 1.00 0 0 4.00 1.00 4 4.00 1.00 1.00 1.00 1.00 0 0 4.00 0 5 5.00 1.00 1.00 1.00 1.00 0 1.00 10.0 1.00 6 6.00 1.00 1.00 1.00 2.00 1.00 1.00 4.00 1.00 # ... with 9 more variables: mathquiz &lt;dbl&gt;, statquiz &lt;dbl&gt;, exp_sqz # &lt;dbl&gt;, hr_base &lt;dbl&gt;, hr_pre &lt;dbl&gt;, hr_post &lt;dbl&gt;, anx_base &lt;dbl&gt;, # anx_pre &lt;dbl&gt;, anx_post &lt;dbl&gt; Inside the head() function, you can change the default of n = 6 rows. You can learn about this and other options in the Help tab search for ‘head’. utils::head(data, n = 3) # A tibble: 3 x 18 sub_num gender major reason exp_cond coffee num_cups phobia prevmath &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1.00 1.00 1.00 3.00 1.00 1.00 0 1.00 3.00 2 2.00 1.00 1.00 2.00 1.00 0 0 1.00 4.00 3 3.00 1.00 1.00 1.00 1.00 0 0 4.00 1.00 # ... with 9 more variables: mathquiz &lt;dbl&gt;, statquiz &lt;dbl&gt;, exp_sqz # &lt;dbl&gt;, hr_base &lt;dbl&gt;, hr_pre &lt;dbl&gt;, hr_post &lt;dbl&gt;, anx_base &lt;dbl&gt;, # anx_pre &lt;dbl&gt;, anx_post &lt;dbl&gt; head(data, n = 11) # A tibble: 11 x 18 sub_num gender major reason exp_cond coffee num_cups phobia prevmath &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1.00 1.00 1.00 3.00 1.00 1.00 0 1.00 3.00 2 2.00 1.00 1.00 2.00 1.00 0 0 1.00 4.00 3 3.00 1.00 1.00 1.00 1.00 0 0 4.00 1.00 4 4.00 1.00 1.00 1.00 1.00 0 0 4.00 0 5 5.00 1.00 1.00 1.00 1.00 0 1.00 10.0 1.00 6 6.00 1.00 1.00 1.00 2.00 1.00 1.00 4.00 1.00 7 7.00 1.00 1.00 1.00 2.00 0 0 4.00 2.00 8 8.00 1.00 1.00 3.00 2.00 1.00 2.00 4.00 1.00 9 9.00 1.00 1.00 1.00 2.00 0 0 4.00 1.00 10 10.0 1.00 1.00 1.00 2.00 1.00 2.00 5.00 0 11 11.0 1.00 1.00 1.00 2.00 0 1.00 5.00 1.00 # ... with 9 more variables: mathquiz &lt;dbl&gt;, statquiz &lt;dbl&gt;, exp_sqz # &lt;dbl&gt;, hr_base &lt;dbl&gt;, hr_pre &lt;dbl&gt;, hr_post &lt;dbl&gt;, anx_base &lt;dbl&gt;, # anx_pre &lt;dbl&gt;, anx_post &lt;dbl&gt; 1.2.4 The names() Function: List the Variable Names Another helpful function is names() which lists out the names of the variables. This is nice to use to copy-paste later on, since…in R code chunks: Spelling matters Capitalization matters Spacing does NOT matter: one space is the same as 100 spaces Line enters are ignored names(data) [1] &quot;sub_num&quot; &quot;gender&quot; &quot;major&quot; &quot;reason&quot; &quot;exp_cond&quot; &quot;coffee&quot; [7] &quot;num_cups&quot; &quot;phobia&quot; &quot;prevmath&quot; &quot;mathquiz&quot; &quot;statquiz&quot; &quot;exp_sqz&quot; [13] &quot;hr_base&quot; &quot;hr_pre&quot; &quot;hr_post&quot; &quot;anx_base&quot; &quot;anx_pre&quot; &quot;anx_post&quot; 1.2.5 The dim() Function: List the Dimentions See how many rows (observation) and columns (variables) dim(data) [1] 100 18 1.2.6 The tibble::glimpse() Function: Gives an Overview of Variables This is a handy function that gives (Muller and Wickham 2017): Dimensions (observations and variables) Names of variables Each variables type, which could be… dbl = numeric: double precision floating point numbers fct = factor: categorical, either nominal or ordinal chr = character: text Lists the first few entries tibble::glimpse(data) Observations: 100 Variables: 18 $ sub_num &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16... $ gender &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... $ major &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... $ reason &lt;dbl&gt; 3, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1,... $ exp_cond &lt;dbl&gt; 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4,... $ coffee &lt;dbl&gt; 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1,... $ num_cups &lt;dbl&gt; 0, 0, 0, 0, 1, 1, 0, 2, 0, 2, 1, 0, 1, 2, 3, 0, 0, 3,... $ phobia &lt;dbl&gt; 1, 1, 4, 4, 10, 4, 4, 4, 4, 5, 5, 4, 7, 4, 3, 8, 4, 5... $ prevmath &lt;dbl&gt; 3, 4, 1, 0, 1, 1, 2, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1,... $ mathquiz &lt;dbl&gt; 43, 49, 26, 29, 31, 20, 13, 23, 38, NA, 29, 32, 18, N... $ statquiz &lt;dbl&gt; 6, 9, 8, 7, 6, 7, 3, 7, 8, 7, 8, 8, 1, 5, 8, 3, 8, 7,... $ exp_sqz &lt;dbl&gt; 7, 11, 8, 8, 6, 6, 4, 7, 7, 6, 10, 7, 3, 4, 6, 1, 7, ... $ hr_base &lt;dbl&gt; 71, 73, 69, 72, 71, 70, 71, 77, 73, 78, 74, 73, 73, 7... $ hr_pre &lt;dbl&gt; 68, 75, 76, 73, 83, 71, 70, 87, 72, 76, 72, 74, 76, 8... $ hr_post &lt;dbl&gt; 65, 68, 72, 78, 74, 76, 66, 84, 67, 74, 73, 74, 78, 7... $ anx_base &lt;dbl&gt; 17, 17, 19, 19, 26, 12, 12, 17, 20, 20, 21, 32, 19, 1... $ anx_pre &lt;dbl&gt; 22, 19, 14, 13, 30, 15, 16, 19, 14, 24, 25, 35, 23, 2... $ anx_post &lt;dbl&gt; 20, 16, 15, 16, 25, 19, 17, 22, 17, 19, 22, 33, 20, 2... 1.2.7 The dplyr::select() Function: Specify VARIABLES to include/keep This function chooses which variables to include, excluding all others not given between the (). data %&gt;% dplyr::select(sub_num, gender, major, reason, exp_cond, coffee) # A tibble: 100 x 6 sub_num gender major reason exp_cond coffee &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1.00 1.00 1.00 3.00 1.00 1.00 2 2.00 1.00 1.00 2.00 1.00 0 3 3.00 1.00 1.00 1.00 1.00 0 4 4.00 1.00 1.00 1.00 1.00 0 5 5.00 1.00 1.00 1.00 1.00 0 6 6.00 1.00 1.00 1.00 2.00 1.00 7 7.00 1.00 1.00 1.00 2.00 0 8 8.00 1.00 1.00 3.00 2.00 1.00 9 9.00 1.00 1.00 1.00 2.00 0 10 10.0 1.00 1.00 1.00 2.00 1.00 # ... with 90 more rows 1.2.8 The dplyr::filter() Function: Specify OBSERVATIONS to include/keep This function chooses which observations to include, excluding all others not given between the (). data %&gt;% dplyr::filter(gender == 1) # A tibble: 57 x 18 sub_num gender major reason exp_cond coffee num_cups phobia prevmath &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1.00 1.00 1.00 3.00 1.00 1.00 0 1.00 3.00 2 2.00 1.00 1.00 2.00 1.00 0 0 1.00 4.00 3 3.00 1.00 1.00 1.00 1.00 0 0 4.00 1.00 4 4.00 1.00 1.00 1.00 1.00 0 0 4.00 0 5 5.00 1.00 1.00 1.00 1.00 0 1.00 10.0 1.00 6 6.00 1.00 1.00 1.00 2.00 1.00 1.00 4.00 1.00 7 7.00 1.00 1.00 1.00 2.00 0 0 4.00 2.00 8 8.00 1.00 1.00 3.00 2.00 1.00 2.00 4.00 1.00 9 9.00 1.00 1.00 1.00 2.00 0 0 4.00 1.00 10 10.0 1.00 1.00 1.00 2.00 1.00 2.00 5.00 0 # ... with 47 more rows, and 9 more variables: mathquiz &lt;dbl&gt;, statquiz # &lt;dbl&gt;, exp_sqz &lt;dbl&gt;, hr_base &lt;dbl&gt;, hr_pre &lt;dbl&gt;, hr_post &lt;dbl&gt;, # anx_base &lt;dbl&gt;, anx_pre &lt;dbl&gt;, anx_post &lt;dbl&gt; You can combine steps to multiple things. The steps are completed in the order we read: top to bottom, left to right. data %&gt;% dplyr::select(sub_num, gender, major, reason, exp_cond, coffee) %&gt;% dplyr::filter(gender == 1) # A tibble: 57 x 6 sub_num gender major reason exp_cond coffee &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1.00 1.00 1.00 3.00 1.00 1.00 2 2.00 1.00 1.00 2.00 1.00 0 3 3.00 1.00 1.00 1.00 1.00 0 4 4.00 1.00 1.00 1.00 1.00 0 5 5.00 1.00 1.00 1.00 1.00 0 6 6.00 1.00 1.00 1.00 2.00 1.00 7 7.00 1.00 1.00 1.00 2.00 0 8 8.00 1.00 1.00 3.00 2.00 1.00 9 9.00 1.00 1.00 1.00 2.00 0 10 10.0 1.00 1.00 1.00 2.00 1.00 # ... with 47 more rows 1.3 Data Wrangling 1.3.1 The dplyr::mutate() Function: Create a New Variable Just like radiation may cause a fish to grow an additional eye (a mutation), the mutate() function grows a new variable. data %&gt;% dplyr::mutate(test = 1) %&gt;% dplyr::select(sub_num, gender, mathquiz, statquiz, test) %&gt;% head() # A tibble: 6 x 5 sub_num gender mathquiz statquiz test &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1.00 1.00 43.0 6.00 1.00 2 2.00 1.00 49.0 9.00 1.00 3 3.00 1.00 26.0 8.00 1.00 4 4.00 1.00 29.0 7.00 1.00 5 5.00 1.00 31.0 6.00 1.00 6 6.00 1.00 20.0 7.00 1.00 1.3.2 The factor() Function: Define Categorical Variables We will be providing this function with three pieces of information: The name of an existing variable A concatinated set of numerical levels A concatinated set of textual labels You must include the SAME number of levels and labels. The ORDER in the sets designates how the labels will be applied to the levels. Here is how it looks to create ONE new factor. Notice I added the letter F to designate that this new variable is a factor. data %&gt;% dplyr::mutate(genderF = factor(gender, levels = c(1, 2), labels = c(&quot;Female&quot;, &quot;Male&quot;))) # A tibble: 100 x 19 sub_num gender major reason exp_cond coffee num_cups phobia prevmath &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1.00 1.00 1.00 3.00 1.00 1.00 0 1.00 3.00 2 2.00 1.00 1.00 2.00 1.00 0 0 1.00 4.00 3 3.00 1.00 1.00 1.00 1.00 0 0 4.00 1.00 4 4.00 1.00 1.00 1.00 1.00 0 0 4.00 0 5 5.00 1.00 1.00 1.00 1.00 0 1.00 10.0 1.00 6 6.00 1.00 1.00 1.00 2.00 1.00 1.00 4.00 1.00 7 7.00 1.00 1.00 1.00 2.00 0 0 4.00 2.00 8 8.00 1.00 1.00 3.00 2.00 1.00 2.00 4.00 1.00 9 9.00 1.00 1.00 1.00 2.00 0 0 4.00 1.00 10 10.0 1.00 1.00 1.00 2.00 1.00 2.00 5.00 0 # ... with 90 more rows, and 10 more variables: mathquiz &lt;dbl&gt;, statquiz # &lt;dbl&gt;, exp_sqz &lt;dbl&gt;, hr_base &lt;dbl&gt;, hr_pre &lt;dbl&gt;, hr_post &lt;dbl&gt;, # anx_base &lt;dbl&gt;, anx_pre &lt;dbl&gt;, anx_post &lt;dbl&gt;, genderF &lt;fct&gt; Notice that the dataset the is printed includes our new variable at the END. You can use the pipe to chain several mutate steps together. I have also assigned the resulting dataset with the five new factor variables at the end to a new name, dataF. Since this code chunk includes a single assignment, there is no output created. Remember to include a PIPE between all your steps, but not at the end! dataF &lt;- data %&gt;% dplyr::mutate(genderF = factor(gender, levels = c(1, 2), labels = c(&quot;Female&quot;, &quot;Male&quot;))) %&gt;% dplyr::mutate(majorF = factor(major, levels = c(1, 2, 3, 4,5), labels = c(&quot;Psychology&quot;, &quot;Premed&quot;, &quot;Biology&quot;, &quot;Sociology&quot;, &quot;Economics&quot;))) %&gt;% dplyr::mutate(reasonF = factor(reason, levels = c(1, 2, 3), labels = c(&quot;Program requirement&quot;, &quot;Personal interest&quot;, &quot;Advisor recommendation&quot;))) %&gt;% dplyr::mutate(exp_condF = factor(exp_cond, levels = c(1, 2, 3, 4), labels = c(&quot;Easy&quot;, &quot;Moderate&quot;, &quot;Difficult&quot;, &quot;Impossible&quot;))) %&gt;% dplyr::mutate(coffeeF = factor(coffee, levels = c(0, 1), labels = c(&quot;Not a regular coffee drinker&quot;, &quot;Regularly drinks coffee&quot;))) See how the new variables are added at the end. tibble::glimpse(data) Observations: 100 Variables: 18 $ sub_num &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16... $ gender &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... $ major &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... $ reason &lt;dbl&gt; 3, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1,... $ exp_cond &lt;dbl&gt; 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4,... $ coffee &lt;dbl&gt; 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1,... $ num_cups &lt;dbl&gt; 0, 0, 0, 0, 1, 1, 0, 2, 0, 2, 1, 0, 1, 2, 3, 0, 0, 3,... $ phobia &lt;dbl&gt; 1, 1, 4, 4, 10, 4, 4, 4, 4, 5, 5, 4, 7, 4, 3, 8, 4, 5... $ prevmath &lt;dbl&gt; 3, 4, 1, 0, 1, 1, 2, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1,... $ mathquiz &lt;dbl&gt; 43, 49, 26, 29, 31, 20, 13, 23, 38, NA, 29, 32, 18, N... $ statquiz &lt;dbl&gt; 6, 9, 8, 7, 6, 7, 3, 7, 8, 7, 8, 8, 1, 5, 8, 3, 8, 7,... $ exp_sqz &lt;dbl&gt; 7, 11, 8, 8, 6, 6, 4, 7, 7, 6, 10, 7, 3, 4, 6, 1, 7, ... $ hr_base &lt;dbl&gt; 71, 73, 69, 72, 71, 70, 71, 77, 73, 78, 74, 73, 73, 7... $ hr_pre &lt;dbl&gt; 68, 75, 76, 73, 83, 71, 70, 87, 72, 76, 72, 74, 76, 8... $ hr_post &lt;dbl&gt; 65, 68, 72, 78, 74, 76, 66, 84, 67, 74, 73, 74, 78, 7... $ anx_base &lt;dbl&gt; 17, 17, 19, 19, 26, 12, 12, 17, 20, 20, 21, 32, 19, 1... $ anx_pre &lt;dbl&gt; 22, 19, 14, 13, 30, 15, 16, 19, 14, 24, 25, 35, 23, 2... $ anx_post &lt;dbl&gt; 20, 16, 15, 16, 25, 19, 17, 22, 17, 19, 22, 33, 20, 2... tibble::glimpse(dataF) Observations: 100 Variables: 23 $ sub_num &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1... $ gender &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1... $ major &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1... $ reason &lt;dbl&gt; 3, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1... $ exp_cond &lt;dbl&gt; 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4... $ coffee &lt;dbl&gt; 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1... $ num_cups &lt;dbl&gt; 0, 0, 0, 0, 1, 1, 0, 2, 0, 2, 1, 0, 1, 2, 3, 0, 0, 3... $ phobia &lt;dbl&gt; 1, 1, 4, 4, 10, 4, 4, 4, 4, 5, 5, 4, 7, 4, 3, 8, 4, ... $ prevmath &lt;dbl&gt; 3, 4, 1, 0, 1, 1, 2, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1... $ mathquiz &lt;dbl&gt; 43, 49, 26, 29, 31, 20, 13, 23, 38, NA, 29, 32, 18, ... $ statquiz &lt;dbl&gt; 6, 9, 8, 7, 6, 7, 3, 7, 8, 7, 8, 8, 1, 5, 8, 3, 8, 7... $ exp_sqz &lt;dbl&gt; 7, 11, 8, 8, 6, 6, 4, 7, 7, 6, 10, 7, 3, 4, 6, 1, 7,... $ hr_base &lt;dbl&gt; 71, 73, 69, 72, 71, 70, 71, 77, 73, 78, 74, 73, 73, ... $ hr_pre &lt;dbl&gt; 68, 75, 76, 73, 83, 71, 70, 87, 72, 76, 72, 74, 76, ... $ hr_post &lt;dbl&gt; 65, 68, 72, 78, 74, 76, 66, 84, 67, 74, 73, 74, 78, ... $ anx_base &lt;dbl&gt; 17, 17, 19, 19, 26, 12, 12, 17, 20, 20, 21, 32, 19, ... $ anx_pre &lt;dbl&gt; 22, 19, 14, 13, 30, 15, 16, 19, 14, 24, 25, 35, 23, ... $ anx_post &lt;dbl&gt; 20, 16, 15, 16, 25, 19, 17, 22, 17, 19, 22, 33, 20, ... $ genderF &lt;fct&gt; Female, Female, Female, Female, Female, Female, Fema... $ majorF &lt;fct&gt; Psychology, Psychology, Psychology, Psychology, Psyc... $ reasonF &lt;fct&gt; Advisor recommendation, Personal interest, Program r... $ exp_condF &lt;fct&gt; Easy, Easy, Easy, Easy, Easy, Moderate, Moderate, Mo... $ coffeeF &lt;fct&gt; Regularly drinks coffee, Not a regular coffee drinke... The following portion works through the assignment for Unit 0 1.3.3 Question 2: Create a new variable = mathquiz + 50 data2 &lt;- dataF %&gt;% dplyr::mutate(mathquiz_p50 = mathquiz + 50) data2 %&gt;% dplyr::select(sub_num, mathquiz, mathquiz_p50) # A tibble: 100 x 3 sub_num mathquiz mathquiz_p50 &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1.00 43.0 93.0 2 2.00 49.0 99.0 3 3.00 26.0 76.0 4 4.00 29.0 79.0 5 5.00 31.0 81.0 6 6.00 20.0 70.0 7 7.00 13.0 63.0 8 8.00 23.0 73.0 9 9.00 38.0 88.0 10 10.0 NA NA # ... with 90 more rows 1.3.4 Question 3: Create a new variable = Hr_base / 60 data3 &lt;- data2 %&gt;% dplyr::mutate(hr_base_bps = hr_base / 60) data3 %&gt;% dplyr::select(sub_num, hr_base, hr_base_bps) # A tibble: 100 x 3 sub_num hr_base hr_base_bps &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1.00 71.0 1.18 2 2.00 73.0 1.22 3 3.00 69.0 1.15 4 4.00 72.0 1.20 5 5.00 71.0 1.18 6 6.00 70.0 1.17 7 7.00 71.0 1.18 8 8.00 77.0 1.28 9 9.00 73.0 1.22 10 10.0 78.0 1.30 # ... with 90 more rows 1.3.5 Question 4a: Create a new variable = Statquiz + 2, then * 10 data4a &lt;- data3 %&gt;% dplyr::mutate(statquiz_4a = (statquiz + 2) * 10 ) 1.3.6 Question 4b: Create a new variable = Statquiz * 10, then + 2 data4b &lt;- data4a %&gt;% dplyr::mutate(statquiz_4b = (statquiz * 10) + 2 ) data4b %&gt;% dplyr::select(sub_num, statquiz, statquiz_4a, statquiz_4b) # A tibble: 100 x 4 sub_num statquiz statquiz_4a statquiz_4b &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1.00 6.00 80.0 62.0 2 2.00 9.00 110 92.0 3 3.00 8.00 100 82.0 4 4.00 7.00 90.0 72.0 5 5.00 6.00 80.0 62.0 6 6.00 7.00 90.0 72.0 7 7.00 3.00 50.0 32.0 8 8.00 7.00 90.0 72.0 9 9.00 8.00 100 82.0 10 10.0 7.00 90.0 72.0 # ... with 90 more rows 1.3.7 Question 5a: Create a new variable = sum of the 3 anxiety measures Here are three ways you may try to find the sum. The middle way does not perform the action we want. The first way works fine, unless there is some missing data. data5a &lt;- data4b %&gt;% dplyr::mutate(anx_plus = anx_base + anx_pre + anx_post) %&gt;% # works, missing?? dplyr::mutate(anx_sum = sum(anx_base, anx_pre, anx_post)) %&gt;% # does NOT work dplyr::mutate(anx_rowsums = rowsums(anx_base, anx_pre, anx_post)) # best way data5a %&gt;% dplyr::select(sub_num, anx_base, anx_pre, anx_post, anx_plus, anx_sum, anx_rowsums) # A tibble: 100 x 7 sub_num anx_base anx_pre anx_post anx_plus anx_sum anx_rowsums &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1.00 17.0 22.0 20.0 59.0 5741 59.0 2 2.00 17.0 19.0 16.0 52.0 5741 52.0 3 3.00 19.0 14.0 15.0 48.0 5741 48.0 4 4.00 19.0 13.0 16.0 48.0 5741 48.0 5 5.00 26.0 30.0 25.0 81.0 5741 81.0 6 6.00 12.0 15.0 19.0 46.0 5741 46.0 7 7.00 12.0 16.0 17.0 45.0 5741 45.0 8 8.00 17.0 19.0 22.0 58.0 5741 58.0 9 9.00 20.0 14.0 17.0 51.0 5741 51.0 10 10.0 20.0 24.0 19.0 63.0 5741 63.0 # ... with 90 more rows 1.3.8 Question 5b: Create a new variable = average of the 3 heart rates data5b &lt;- data5a %&gt;% dplyr::mutate(hr_avg = (hr_base + hr_pre + hr_post)/3) %&gt;% # works,no missings dplyr::mutate(hr_rowmeans = rowmeans(hr_base, hr_pre, hr_post)) # always works data5b %&gt;% dplyr::select(sub_num, hr_base, hr_pre, hr_post, hr_avg, hr_rowmeans) # A tibble: 100 x 6 sub_num hr_base hr_pre hr_post hr_avg hr_rowmeans &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1.00 71.0 68.0 65.0 68.0 68.0 2 2.00 73.0 75.0 68.0 72.0 72.0 3 3.00 69.0 76.0 72.0 72.3 72.3 4 4.00 72.0 73.0 78.0 74.3 74.3 5 5.00 71.0 83.0 74.0 76.0 76.0 6 6.00 70.0 71.0 76.0 72.3 72.3 7 7.00 71.0 70.0 66.0 69.0 69.0 8 8.00 77.0 87.0 84.0 82.7 82.7 9 9.00 73.0 72.0 67.0 70.7 70.7 10 10.0 78.0 76.0 74.0 76.0 76.0 # ... with 90 more rows 1.3.9 Question 6: Create a new variable = Statquiz minus Exp_sqz data6 &lt;- data5b %&gt;% dplyr::mutate(statDiff = statquiz - exp_sqz) data6 %&gt;% dplyr::select(sub_num, exp_cond, exp_condF, statquiz, exp_sqz, statDiff) # A tibble: 100 x 6 sub_num exp_cond exp_condF statquiz exp_sqz statDiff &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1.00 1.00 Easy 6.00 7.00 -1.00 2 2.00 1.00 Easy 9.00 11.0 -2.00 3 3.00 1.00 Easy 8.00 8.00 0 4 4.00 1.00 Easy 7.00 8.00 -1.00 5 5.00 1.00 Easy 6.00 6.00 0 6 6.00 2.00 Moderate 7.00 6.00 1.00 7 7.00 2.00 Moderate 3.00 4.00 -1.00 8 8.00 2.00 Moderate 7.00 7.00 0 9 9.00 2.00 Moderate 8.00 7.00 1.00 10 10.0 2.00 Moderate 7.00 6.00 1.00 # ... with 90 more rows 1.3.10 Putting it all together data_clean &lt;- read_excel(&quot;Ihno_dataset.xls&quot;) %&gt;% dplyr::rename_all(tolower) %&gt;% dplyr::mutate(genderF = factor(gender, levels = c(1, 2), labels = c(&quot;Female&quot;, &quot;Male&quot;))) %&gt;% dplyr::mutate(majorF = factor(major, levels = c(1, 2, 3, 4,5), labels = c(&quot;Psychology&quot;, &quot;Premed&quot;, &quot;Biology&quot;, &quot;Sociology&quot;, &quot;Economics&quot;))) %&gt;% dplyr::mutate(reasonF = factor(reason, levels = c(1, 2, 3), labels = c(&quot;Program requirement&quot;, &quot;Personal interest&quot;, &quot;Advisor recommendation&quot;))) %&gt;% dplyr::mutate(exp_condF = factor(exp_cond, levels = c(1, 2, 3, 4), labels = c(&quot;Easy&quot;, &quot;Moderate&quot;, &quot;Difficult&quot;, &quot;Impossible&quot;))) %&gt;% dplyr::mutate(coffeeF = factor(coffee, levels = c(0, 1), labels = c(&quot;Not a regular coffee drinker&quot;, &quot;Regularly drinks coffee&quot;))) %&gt;% dplyr::mutate(mathquiz_p50 = mathquiz + 50) %&gt;% dplyr::mutate(hr_base_bps = hr_base / 60) %&gt;% dplyr::mutate(statquiz_4a = (statquiz + 2) * 10 ) %&gt;% dplyr::mutate(statquiz_4b = (statquiz * 10) + 2 ) %&gt;% dplyr::mutate(anx_sum = rowsums(anx_base, anx_pre, anx_post)) %&gt;% dplyr::mutate(hr_mean = rowmeans(hr_base + hr_pre + hr_post)) %&gt;% dplyr::mutate(statDiff = statquiz - exp_sqz) tibble::glimpse(data_clean) "],
["examining-a-distribution.html", "Chapter 2 EXAMINING A DISTRIBUTION Example: Ihno’s Experiment 2.1 Frequency Tables 2.2 Bar Charts 2.3 Histograms 2.4 Percentiles", " Chapter 2 EXAMINING A DISTRIBUTION Chapter Links Chapter 2 Slide Show Assingment Links Unit 1 Assignment - Write Up Skeleton Unit 1 Assignment - Rmd Skeleton Inho’s Dataset - Excel format Example: Ihno’s Experiment This is the same dataset used in the previous chapter and in most of the textbook’s section C questions. Required Packages library(tidyverse) # Loads several very helpful &#39;tidy&#39; packages library(readxl) # Read in Excel datasets library(furniture) # Nice tables (by our own Tyson Barrett) library(psych) # Lots of nice tid-bits Data Import and Wrangling The previous chapter build the following code to read in the dataset and prepare it for analysis. data_clean &lt;- read_excel(&quot;Ihno_dataset.xls&quot;) %&gt;% dplyr::rename_all(tolower) %&gt;% dplyr::mutate(genderF = factor(gender, levels = c(1, 2), labels = c(&quot;Female&quot;, &quot;Male&quot;))) %&gt;% dplyr::mutate(majorF = factor(major, levels = c(1, 2, 3, 4,5), labels = c(&quot;Psychology&quot;, &quot;Premed&quot;, &quot;Biology&quot;, &quot;Sociology&quot;, &quot;Economics&quot;))) %&gt;% dplyr::mutate(reasonF = factor(reason, levels = c(1, 2, 3), labels = c(&quot;Program requirement&quot;, &quot;Personal interest&quot;, &quot;Advisor recommendation&quot;))) %&gt;% dplyr::mutate(exp_condF = factor(exp_cond, levels = c(1, 2, 3, 4), labels = c(&quot;Easy&quot;, &quot;Moderate&quot;, &quot;Difficult&quot;, &quot;Impossible&quot;))) %&gt;% dplyr::mutate(coffeeF = factor(coffee, levels = c(0, 1), labels = c(&quot;Not a regular coffee drinker&quot;, &quot;Regularly drinks coffee&quot;))) %&gt;% dplyr::mutate(hr_base_bps = hr_base / 60) %&gt;% dplyr::mutate(anx_sum = rowsums(anx_base, anx_pre, anx_post)) %&gt;% dplyr::mutate(hr_mean = rowmeans(hr_base + hr_pre + hr_post)) %&gt;% dplyr::mutate(statDiff = statquiz - exp_sqz) tibble::glimpse(data_clean) Observations: 100 Variables: 27 $ sub_num &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,... $ gender &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... $ major &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... $ reason &lt;dbl&gt; 3, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 1, 1,... $ exp_cond &lt;dbl&gt; 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4,... $ coffee &lt;dbl&gt; 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0,... $ num_cups &lt;dbl&gt; 0, 0, 0, 0, 1, 1, 0, 2, 0, 2, 1, 0, 1, 2, 3, 0, 0,... $ phobia &lt;dbl&gt; 1, 1, 4, 4, 10, 4, 4, 4, 4, 5, 5, 4, 7, 4, 3, 8, 4... $ prevmath &lt;dbl&gt; 3, 4, 1, 0, 1, 1, 2, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1,... $ mathquiz &lt;dbl&gt; 43, 49, 26, 29, 31, 20, 13, 23, 38, NA, 29, 32, 18... $ statquiz &lt;dbl&gt; 6, 9, 8, 7, 6, 7, 3, 7, 8, 7, 8, 8, 1, 5, 8, 3, 8,... $ exp_sqz &lt;dbl&gt; 7, 11, 8, 8, 6, 6, 4, 7, 7, 6, 10, 7, 3, 4, 6, 1, ... $ hr_base &lt;dbl&gt; 71, 73, 69, 72, 71, 70, 71, 77, 73, 78, 74, 73, 73... $ hr_pre &lt;dbl&gt; 68, 75, 76, 73, 83, 71, 70, 87, 72, 76, 72, 74, 76... $ hr_post &lt;dbl&gt; 65, 68, 72, 78, 74, 76, 66, 84, 67, 74, 73, 74, 78... $ anx_base &lt;dbl&gt; 17, 17, 19, 19, 26, 12, 12, 17, 20, 20, 21, 32, 19... $ anx_pre &lt;dbl&gt; 22, 19, 14, 13, 30, 15, 16, 19, 14, 24, 25, 35, 23... $ anx_post &lt;dbl&gt; 20, 16, 15, 16, 25, 19, 17, 22, 17, 19, 22, 33, 20... $ genderF &lt;fct&gt; Female, Female, Female, Female, Female, Female, Fe... $ majorF &lt;fct&gt; Psychology, Psychology, Psychology, Psychology, Ps... $ reasonF &lt;fct&gt; Advisor recommendation, Personal interest, Program... $ exp_condF &lt;fct&gt; Easy, Easy, Easy, Easy, Easy, Moderate, Moderate, ... $ coffeeF &lt;fct&gt; Regularly drinks coffee, Not a regular coffee drin... $ hr_base_bps &lt;dbl&gt; 1.183333, 1.216667, 1.150000, 1.200000, 1.183333, ... $ anx_sum &lt;dbl&gt; 59, 52, 48, 48, 81, 46, 45, 58, 51, 63, 68, 100, 6... $ hr_mean &lt;dbl&gt; 204, 216, 217, 223, 228, 217, 207, 248, 212, 228, ... $ statDiff &lt;dbl&gt; -1, -2, 0, -1, 0, 1, -1, 0, 1, 1, -2, 1, -2, 1, 2,... 2.1 Frequency Tables These tables are best for showing the breakdown of a sample across the levels of a single CATEGORICAL variable (factor). They help pick out the mode(s) and identify unusual or impossible values (Barrett, Brignone, and Laxman 2018). data_clean %&gt;% furniture::tableF(majorF) ----------------------------------------- majorF Freq CumFreq Percent CumPerc Psychology 29 29 29.00% 29.00% Premed 25 54 25.00% 54.00% Biology 21 75 21.00% 75.00% Sociology 15 90 15.00% 90.00% Economics 10 100 10.00% 100.00% ----------------------------------------- Phobia is one variable that is in between being categorical and continuous. data_clean %&gt;% furniture::tableF(phobia) ------------------------------------- phobia Freq CumFreq Percent CumPerc 0 12 12 12.00% 12.00% 1 15 27 15.00% 27.00% 2 12 39 12.00% 39.00% 3 16 55 16.00% 55.00% 4 21 76 21.00% 76.00% 5 11 87 11.00% 87.00% 6 1 88 1.00% 88.00% 7 4 92 4.00% 92.00% 8 4 96 4.00% 96.00% 9 1 97 1.00% 97.00% 10 3 100 3.00% 100.00% ------------------------------------- If a variable has many possible values (i.e. it is more continuous than categorical), you can add an option to tell how many values n = # you want displayed in the table, cutting out all the middle values. data_clean %&gt;% furniture::tableF(hr_post, n = 10) -------------------------------------- hr_post Freq CumFreq Percent CumPerc 64 4 4 4.00% 4.00% 65 3 7 3.00% 7.00% 66 3 10 3.00% 10.00% 67 5 15 5.00% 15.00% 68 5 20 5.00% 20.00% ... ... ... ... ... 79 5 94 5.00% 94.00% 80 1 95 1.00% 95.00% 81 1 96 1.00% 96.00% 82 1 97 1.00% 97.00% 84 2 99 2.00% 99.00% 86 1 100 1.00% 100.00% -------------------------------------- 2.2 Bar Charts These plots are best for showing the breakdown of a sample across the levels of a single CATEGORICAL variable. They help pick out the mode(s) and identify unusual or impossible values (Wickham 2009). There must be SPACE between the bars! data_clean %&gt;% ggplot(aes(majorF)) + geom_bar() Here is an example of a two-level variable data_clean %&gt;% ggplot(aes(coffeeF)) + geom_bar() Here is an example of an 11-level variable data_clean %&gt;% ggplot(aes(phobia)) + geom_bar() 2.3 Histograms These plots are best for showing the distribution of a single CONTINUOUS variable. They help visually determine the shape, center [mean, median, mode(s)], spread [stadard deviation, range], and identify extreme or impossible values (Wickham 2009). data_clean %&gt;% ggplot(aes(phobia)) + geom_histogram() There must NOT be SPACE between the bars! Notice how the bars do not touch. This is because the default includes too many bars, many of which are not included in the dataset. There are TWO ways specify something other than the default: Change the NUMBER of bins: bins = # Change the WIDTH of the bins: binwidth = # If you try to do BOTH, only the first option will be used and the second will be ignored. 2.3.1 Change the Number of Bins data_clean %&gt;% ggplot(aes(phobia)) + geom_histogram(bins = 8) 2.3.2 Change the Bin Width data_clean %&gt;% ggplot(aes(phobia)) + geom_histogram(binwidth = 5) 2.3.3 Make Seperate Panels -by- a Factor To make separate plots based on another categorical variable, a FACTOR, we need to add a layer to the plot. Reminder: Steps before the ggplot() are combined with pipes %&gt;%, whereas layers of the plot are combined with the addition symbol +. data_clean %&gt;% ggplot(aes(mathquiz)) + geom_histogram(binwidth = 4) + facet_grid(. ~ coffeeF) data_clean %&gt;% ggplot(aes(mathquiz)) + geom_histogram(binwidth = 4) + facet_grid(coffeeF ~ .) 2.4 Percentiles The quantile(probs = c(#, #, ..., #)) function in the base download of R may be used to request the deciles, quartiles, or other percentiles for a vector for numbers (R Core Team 2017). To use this function, we have to first pull out one variable of interest from our dataset (data.frame) and make it into a vector. This is done with a dplyr::pull(varname) step (Wickham et al. 2017). 2.4.1 Deciles Deciles break the variable’s values into 10% chunks. data_clean %&gt;% dplyr::pull(statquiz) %&gt;% quantile(probs = c(0, .10, .20, .30, .40, .50, .60, .70, .80, .90, 1)) 0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% 1.0 4.0 6.0 6.0 7.0 7.0 8.0 8.0 8.0 8.1 10.0 With Missing Values If the variable have any missing values, an error message with be outputted instead of what you expect. data_clean %&gt;% dplyr::pull(mathquiz) %&gt;% quantile(probs = c(0, .10, .20, .30, .40, .50, .60, .70, .80, .90, 1)) Error in quantile.default(., probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, : missing values and NaN's not allowed if 'na.rm' is FALSE Option to Ignore Missing Values To avoid getting this message and ignore the missing values, use the na.rm = TRUE option. data_clean %&gt;% dplyr::pull(mathquiz) %&gt;% quantile(probs = c(0, .10, .20, .30, .40, .50, .60, .70, .80, .90, 1), na.rm =TRUE) 0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% 9.0 15.0 21.0 25.2 28.0 30.0 32.0 33.8 37.2 41.0 49.0 2.4.2 Quartiles Quartiles break variable’s values into 4 chunks. If you include 0 (minimum) and 1 (maximum) you will get the Five Number Summary, which is: min, the minimum Q1, the 25th percentile Q2, the 50th percentile or the Median Q3, the 75th percentile max, the maximum These values are used to create boxplots in the next chapter. data_clean %&gt;% dplyr::pull(statquiz) %&gt;% quantile(probs = c(0, .25, .50, .75, 1)) 0% 25% 50% 75% 100% 1 6 7 8 10 2.4.3 Other Percentiles You may also include any other percentile between 0 and 1. data_clean %&gt;% dplyr::pull(statquiz) %&gt;% quantile(probs = c(.01, .05, .173, .90)) 1% 5% 17.3% 90% 2.98 3.00 5.00 8.10 "],
["summary-statistics.html", "Chapter 3 SUMMARY STATISTICS Example: Cancer Experiment 3.1 Descriptive Statistics 3.2 Boxplots", " Chapter 3 SUMMARY STATISTICS Chapter Links Chapter 3 Slide Show Interactive Online App - Mean &amp; Median Cancer Dataset - SPSS format Assignment Links Unit 1 Assignment - Write Up Skeleton Unit 1 Assignment - Rmd Skeleton Inho’s Dataset - Excel format Example: Cancer Experiment Source of Data Mid-Michigan Medical Center, Midland, Michigan, 1999: A study of oral condition of cancer patients. Description of the Study The data set contains part of the data for a study of oral condition of cancer patients conducted at the Mid-Michigan Medical Center. The oral conditions of the patients were measured and recorded at the initial stage, at the end of the second week, at the end of the fourth week, and at the end of the sixth week. The variables age, initial weight and initial cancer stage of the patients were recorded. Patients were divided into two groups at random: One group received a placebo and the other group received aloe juice treatment. Sample size n = 25 patients with neck cancer. The treatment is Aloe Juice. Variables Included ID patient identification number trt treatment group 0 placebo 1 aloe juice age patient’s age, in years weightin patient’s weight (pounds) at the initial stage stage initial cancer stage coded 1 through 4 totalcin oral condition at the initial stage totalcw2 oral condition at the end of week 2 totalcw4 oral condition at the end of week 4 totalcw6 oral condition at the end of week 6 Required Packages library(tidyverse) # Loads several very helpful &#39;tidy&#39; packages library(haven) # Read in SPSS datasets library(furniture) # Nice tables (by our own Tyson Barrett) library(psych) # Lots of nice tid-bits Data Import The Cancer dataset is saved in SPSS format, which is evident from the .sav ending on the file name. The haven package is downloaded as part of the tidyverse set of packages, but is not automatically loaded. It must have its own library() function call (see above). The haven::read_spss() function works very simarly to the readxl::read_excel() function we used last chapter (Wickham and Miller 2017). Make sure the dataset is saved in the same folder as this file Make sure the that folder is the working directory cancer_raw &lt;- haven::read_spss(&quot;cancer.sav&quot;) tibble::glimpse(cancer_raw) Observations: 25 Variables: 9 $ ID &lt;dbl&gt; 1, 5, 6, 9, 11, 15, 21, 26, 31, 35, 39, 41, 45, 2, 12... $ TRT &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,... $ AGE &lt;dbl&gt; 52, 77, 60, 61, 59, 69, 67, 56, 61, 51, 46, 65, 67, 4... $ WEIGHIN &lt;dbl&gt; 124.0, 160.0, 136.5, 179.6, 175.8, 167.6, 186.0, 158.... $ STAGE &lt;dbl&gt; 2, 1, 4, 1, 2, 1, 1, 3, 1, 1, 4, 1, 1, 2, 4, 1, 2, 1,... $ TOTALCIN &lt;dbl&gt; 6, 9, 7, 6, 6, 6, 6, 6, 6, 6, 7, 6, 8, 7, 6, 4, 6, 6,... $ TOTALCW2 &lt;dbl&gt; 6, 6, 9, 7, 7, 6, 11, 11, 9, 4, 8, 6, 8, 16, 10, 6, 1... $ TOTALCW4 &lt;dbl&gt; 6, 10, 17, 9, 16, 6, 11, 15, 6, 8, 11, 9, 9, 9, 11, 8... $ TOTALCW6 &lt;dbl&gt; 7, 9, 19, 3, 13, 11, 10, 15, 8, 7, 11, 6, 10, 10, 9, ... Data Wrangling cancer_clean &lt;- cancer_raw %&gt;% dplyr::rename_all(tolower) %&gt;% dplyr::mutate(id = factor(id)) %&gt;% dplyr::mutate(trt = factor(trt, labels = c(&quot;Placebo&quot;, &quot;Aloe Juice&quot;))) %&gt;% dplyr::mutate(stage = factor(stage)) tibble::glimpse(cancer_clean) Observations: 25 Variables: 9 $ id &lt;fct&gt; 1, 5, 6, 9, 11, 15, 21, 26, 31, 35, 39, 41, 45, 2, 12... $ trt &lt;fct&gt; Placebo, Placebo, Placebo, Placebo, Placebo, Placebo,... $ age &lt;dbl&gt; 52, 77, 60, 61, 59, 69, 67, 56, 61, 51, 46, 65, 67, 4... $ weighin &lt;dbl&gt; 124.0, 160.0, 136.5, 179.6, 175.8, 167.6, 186.0, 158.... $ stage &lt;fct&gt; 2, 1, 4, 1, 2, 1, 1, 3, 1, 1, 4, 1, 1, 2, 4, 1, 2, 1,... $ totalcin &lt;dbl&gt; 6, 9, 7, 6, 6, 6, 6, 6, 6, 6, 7, 6, 8, 7, 6, 4, 6, 6,... $ totalcw2 &lt;dbl&gt; 6, 6, 9, 7, 7, 6, 11, 11, 9, 4, 8, 6, 8, 16, 10, 6, 1... $ totalcw4 &lt;dbl&gt; 6, 10, 17, 9, 16, 6, 11, 15, 6, 8, 11, 9, 9, 9, 11, 8... $ totalcw6 &lt;dbl&gt; 7, 9, 19, 3, 13, 11, 10, 15, 8, 7, 11, 6, 10, 10, 9, ... 3.1 Descriptive Statistics 3.1.1 Extensive Set The describe() function from the psych package returns an extensive listing of basic summary statistics for every variable in a dataset (Revelle 2017). vars number order of the variables in this table n how many non-missing values there are mean the average or arithmetic mean sd the standard deviation median the 50th percentile or Q2 trimmed the mean after removing the top and bottom 10% of values mad median absolute deviation (from the median) DO NOT WORRY ABOUT! min the minimum or lowest value max the maximum or highest value range full range of values, max - min skew skewness (no SE for skewness given) kurtosis kurtosis (no SE for kurtosis given) se the standard error for the MEAN, not the skewness or kurtosis cancer_clean %&gt;% psych::describe() vars n mean sd median trimmed mad min max range skew id* 1 25 13.00 7.36 13.0 13.00 8.90 1 25.0 24.0 0.00 trt* 2 25 1.44 0.51 1.0 1.43 0.00 1 2.0 1.0 0.23 age 3 25 59.64 12.93 60.0 59.95 11.86 27 86.0 59.0 -0.31 weighin 4 25 178.28 31.98 172.8 176.57 21.05 124 261.4 137.4 0.73 stage* 5 25 2.88 1.24 2.0 2.81 1.48 1 5.0 4.0 0.73 totalcin 6 25 6.52 1.53 6.0 6.33 0.00 4 12.0 8.0 1.80 totalcw2 7 25 8.28 2.54 8.0 8.10 2.97 4 16.0 12.0 1.01 totalcw4 8 25 10.36 3.47 10.0 10.19 2.97 6 17.0 11.0 0.49 totalcw6 9 23 9.48 3.49 9.0 9.21 2.97 3 19.0 16.0 0.77 kurtosis se id* -1.34 1.47 trt* -2.02 0.10 age -0.01 2.59 weighin 0.07 6.40 stage* -0.90 0.25 totalcin 4.30 0.31 totalcw2 1.14 0.51 totalcw4 -1.00 0.69 totalcw6 0.53 0.73 NOTE The names of categorical variables (factors) are followed by an astrics to indicate that summary statistics should not be evaluated since the variable is not continuous or on an interval scale. It is better to avoid calculating summary statistics for categorical variables in the first place by first restricting the dataset to only continuous variables using a dplyr::select() step. Make sure to use a dplyr::select(var1, var2, ..., var12) step to select only the variables of interest. cancer_clean %&gt;% dplyr::select(age, weighin, totalcin, totalcw2, totalcw4, totalcw6) %&gt;% psych::describe() vars n mean sd median trimmed mad min max range skew age 1 25 59.64 12.93 60.0 59.95 11.86 27 86.0 59.0 -0.31 weighin 2 25 178.28 31.98 172.8 176.57 21.05 124 261.4 137.4 0.73 totalcin 3 25 6.52 1.53 6.0 6.33 0.00 4 12.0 8.0 1.80 totalcw2 4 25 8.28 2.54 8.0 8.10 2.97 4 16.0 12.0 1.01 totalcw4 5 25 10.36 3.47 10.0 10.19 2.97 6 17.0 11.0 0.49 totalcw6 6 23 9.48 3.49 9.0 9.21 2.97 3 19.0 16.0 0.77 kurtosis se age -0.01 2.59 weighin 0.07 6.40 totalcin 4.30 0.31 totalcw2 1.14 0.51 totalcw4 -1.00 0.69 totalcw6 0.53 0.73 3.1.2 Simple Set The table1() function in the furniture package returns a much smaller listing of summary statistics (Barrett, Brignone, and Laxman 2018). Categorical Variables: count (percentage) within each category Continuous Variables: mean (standard deviation) cancer_clean %&gt;% furniture::table1() --------------------------------- Mean/Count (SD/%) n = 25 id 1 1 (4%) 2 1 (4%) 5 1 (4%) 6 1 (4%) 9 1 (4%) 11 1 (4%) 12 1 (4%) 14 1 (4%) 15 1 (4%) 16 1 (4%) 21 1 (4%) 22 1 (4%) 24 1 (4%) 26 1 (4%) 31 1 (4%) 34 1 (4%) 35 1 (4%) 37 1 (4%) 39 1 (4%) 41 1 (4%) 42 1 (4%) 44 1 (4%) 45 1 (4%) 50 1 (4%) 58 1 (4%) trt Placebo 14 (56%) Aloe Juice 11 (44%) age 59.6 (12.9) weighin 178.3 (32.0) stage 0 1 (4%) 1 12 (48%) 2 6 (24%) 3 1 (4%) 4 5 (20%) totalcin 6.5 (1.5) totalcw2 8.3 (2.5) totalcw4 10.4 (3.5) totalcw6 9.5 (3.5) --------------------------------- The variables desired can also be listed inside the function (selarate with commas). cancer_clean %&gt;% furniture::table1(age, weighin, stage, totalcin) ---------------------------- Mean/Count (SD/%) n = 25 age 59.6 (12.9) weighin 178.3 (32.0) stage 0 1 (4%) 1 12 (48%) 2 6 (24%) 3 1 (4%) 4 5 (20%) totalcin 6.5 (1.5) ---------------------------- 3.1.3 Simple Set, -by- a Factor You may use a dplyr::group_by(grouping_var) step before the furniture::table1() step to create summary statistics for different subgroups. cancer_clean %&gt;% dplyr::group_by(trt) %&gt;% furniture::table1(age, weighin, stage, totalcin) ------------------------------------ trt Placebo Aloe Juice n = 14 n = 11 age 59.8 (9.0) 59.5 (17.2) weighin 167.5 (23.0) 192.0 (37.4) stage 0 0 (0%) 1 (9.1%) 1 8 (57.1%) 4 (36.4%) 2 3 (21.4%) 3 (27.3%) 3 1 (7.1%) 0 (0%) 4 2 (14.3%) 3 (27.3%) totalcin 6.6 (0.9) 6.5 (2.1) ------------------------------------ cancer_clean %&gt;% dplyr::group_by(stage) %&gt;% furniture::table1(age, weighin, totalcin, trt) ---------------------------------------------------------------------------- stage 0 1 2 3 n = 1 n = 12 n = 6 n = 1 age 73.0 (NA) 61.7 (15.6) 56.3 (12.0) 56.0 (NA) weighin 181.5 (NA) 179.4 (24.0) 175.5 (45.7) 158.0 (NA) totalcin 8.0 (NA) 6.2 (1.3) 6.0 (0.6) 6.0 (NA) trt Placebo 0 (0%) 8 (66.7%) 3 (50%) 1 (100%) Aloe Juice 1 (100%) 4 (33.3%) 3 (50%) 0 (0%) 4 n = 5 56.8 (8.1) 182.3 (42.5) 7.8 (2.4) 2 (40%) 3 (60%) ---------------------------------------------------------------------------- 3.2 Boxplots For boxplots, you must specify the variable of interest into the aesthetics as the y variable: ggplot(aes(y = continuous_var)) before adding the geom_boxplot() layer (Wickham 2009). Reminder: Steps before the ggplot() are combined with pipes %&gt;%, whereas layers of the plot are combined with the addition symbol +. 3.2.1 Single Box If you only want to produce a single boxplot, then the aesthetics must include some quoted text as the x variable. cancer_clean %&gt;% ggplot(aes(x = &quot;Full Data Set&quot;, y = weighin)) + geom_boxplot() 3.2.2 Single Box -for- a Subset One Requirement Where as the dplyr::select() function specifies which VARIABLES to reduce down to, the dplyr::filter() function specifies which ROWS or PARTICIPANTS to reduce down to. When using a dplyr::filter() step, make sure to change the x = &quot;text&quot;, too. cancer_clean %&gt;% dplyr::filter(weighin &lt; 172) %&gt;% ggplot(aes(x = &quot;Weigh At Baseline &lt; 172&quot;, y = weighin)) + geom_boxplot() Two Requirements When testing for a match to a value (for equality) use == instead of = in the dplyr::filter() step. Use the &amp; symbol to require multiple conditions for the subset, but only include one quoted text phrase for x. cancer_clean %&gt;% dplyr::filter(weighin &gt;= 150 &amp; trt == &quot;Placebo&quot;) %&gt;% ggplot(aes(x = &quot;Placebo and at least 150 Pounds&quot;, y = weighin)) + geom_boxplot() A Requirement Specified with a List A helpful symbol-set is %in%, which tests if the thing before it is included in the list of elements that comes after it. cancer_clean %&gt;% dplyr::filter(trt == &quot;Aloe Juice&quot; &amp; stage %in% c(2, 3, 4)) %&gt;% ggplot(aes(x = &quot;On Aloe Juice and Stage 2-4&quot;, y = weighin)) + geom_boxplot() 3.2.3 Multiple Boxes -by- a Factor There are three ways to included a categorical variable to break the sample into groups. You may specify the factor with: fill the variable is denoted with different colors filling the boxes x the horizontal axis is marked for all levels facet_grid() a panel is create for each level Use fill = var_name cancer_clean %&gt;% ggplot(aes(x = &quot;Full Sample&quot;, y = weighin, fill = trt)) + geom_boxplot() Use x = var_name cancer_clean %&gt;% ggplot(aes(x = trt, y = weighin)) + geom_boxplot() Use facet_grid(. ~ var_name) cancer_clean %&gt;% ggplot(aes(x = &quot;Full Sample&quot;, y = weighin)) + geom_boxplot() + facet_grid(. ~ trt) 3.2.4 Multiple Boxes -by- 2 Factors You may combine any of the three previous specification, one per categorical (factor) variable. 3.2.4.1 Use fill = var_name_1 and x = var_name_2 cancer_clean %&gt;% ggplot(aes(x = stage, y = weighin, fill = trt)) + geom_boxplot() 3.2.4.2 Use x = var_name_1 and facet_grid(. ~ var_name_2) cancer_clean %&gt;% ggplot(aes(x = trt, y = weighin)) + geom_boxplot() + facet_grid(. ~ stage) 3.2.4.3 Use fill = var_name_1 and facet_grid(. ~ var_name_2) cancer_clean %&gt;% ggplot(aes(x = &quot;Full Sample&quot;, y = weighin, fill = trt)) + geom_boxplot() + facet_grid(. ~ stage) 3.2.5 Multiple Boxes -for- a Subset AND -by- 2 Factors The layers maybe combined to create more complicated plots. Here is a plot for only participants who were in stage 1, 2, or 4 (n &gt; 1 per stage), and compares the final oral condition for each stage between participants receiving the Aloe treatment vs. the placebo. cancer_clean %&gt;% dplyr::filter(stage %in% c(&quot;1&quot;, &quot;2&quot;, &quot;4&quot;)) %&gt;% ggplot(aes(x = stage, y = totalcw6, fill = trt)) + geom_boxplot() 3.2.6 Multiple Boxes -for- Repeated Measurements The ordinal data is in what is called “WIDE” format, with the repeated measurements as separate variables, sitting side-by-side. Each participant’s data is contained in a single line (25 lines here). To sort a dataset, use the dplyr::arrange() function and include the variable or variables you wish to sort by in the parentheses. cancer_clean %&gt;% dplyr::arrange(id) %&gt;% dplyr::select(id, totalcin, totalcw2, totalcw4, totalcw6) # A tibble: 25 x 5 id totalcin totalcw2 totalcw4 totalcw6 &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 6.00 6.00 6.00 7.00 2 2 7.00 16.0 9.00 10.0 3 5 9.00 6.00 10.0 9.00 4 6 7.00 9.00 17.0 19.0 5 9 6.00 7.00 9.00 3.00 6 11 6.00 7.00 16.0 13.0 7 12 6.00 10.0 11.0 9.00 8 14 4.00 6.00 8.00 7.00 9 15 6.00 6.00 6.00 11.0 10 16 6.00 11.0 11.0 14.0 # ... with 15 more rows Some data manipulations is needed to “stack” the repeated measurement variables (baseline, week 2, week 4, week 6) into a single variable we will call value. We also need another new variable that denotes the measurement time, which we will call time. The resulting dataset is said to be in “LONG” format. Now there will be one line for each observation time on each participant (4 x 25 = 100 lines here). This is done with with the tidyr::gather(key = &quot;new_time_var&quot;, value = &quot;new_value_var&quot;, old_var_1, old_var_2, ...) function. Ignore the message that says “attributes are not identical across measure variables; they will be dropped”. cancer_clean %&gt;% tidyr::gather(key = &quot;time&quot;, value = &quot;value&quot;, totalcin, totalcw2, totalcw4, totalcw6) %&gt;% dplyr::arrange(id, time) %&gt;% dplyr::select(id, time, value) # A tibble: 100 x 3 id time value &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt; 1 1 totalcin 6.00 2 1 totalcw2 6.00 3 1 totalcw4 6.00 4 1 totalcw6 7.00 5 2 totalcin 7.00 6 2 totalcw2 16.0 7 2 totalcw4 9.00 8 2 totalcw6 10.0 9 5 totalcin 9.00 10 5 totalcw2 6.00 # ... with 90 more rows Once the data is in this format, you can create box plots for each time point. Ignore the additional message that says “Removed 2 rows containing non-finite values (stat_boxplot)”. This is just alerting you to the fact that two people are missing their week 6 oral condiditon values. cancer_clean %&gt;% tidyr::gather(key = &quot;time&quot;, value = &quot;value&quot;, totalcin, totalcw2, totalcw4, totalcw6) %&gt;% ggplot(aes(x = time, y = value)) + geom_boxplot() Multiple Boxes -for- Repeated Measurements AND -by- a Factor cancer_clean %&gt;% tidyr::gather(key = &quot;time&quot;, value = &quot;value&quot;, totalcin, totalcw2, totalcw4, totalcw6) %&gt;% ggplot(aes(x = time, y = value, fill = trt)) + geom_boxplot() cancer_clean %&gt;% tidyr::gather(key = &quot;time&quot;, value = &quot;value&quot;, totalcin, totalcw2, totalcw4, totalcw6) %&gt;% ggplot(aes(x = time, y = value)) + geom_boxplot() + facet_grid(. ~ trt) "],
["standardizing-scores.html", "Chapter 4 STANDARDIZING SCORES 4.1 Standardize Variables - Manually 4.2 Standardize Variables - with the scale() funciton", " Chapter 4 STANDARDIZING SCORES Chapter Links Chapter 4 Slide Show Interactive Online App - Normal Curve Interactive Online App - p Values from a Normal Curve Interactive Online App - Statistical Significance Cancer Dataset - SPSS format Assignment Links Unit 1 Assignment - Write Up Skeleton Unit 1 Assignment - Rmd Skeleton Inho’s Dataset - Excel format Required Packages library(tidyverse) # Loads several very helpful &#39;tidy&#39; packages library(haven) # Read in SPSS datasets library(furniture) # Nice tables (by our own Tyson Barrett) Example: Cancer Experiment The Cancer dataset was introduced in chapter 3. 4.1 Standardize Variables - Manually You can manually create a stadradized version of the age variable. First, you must find the mean and standard deviation of the age variable. cancer_clean %&gt;% furniture::table1(age) ----------------------- Mean/Count (SD/%) n = 25 age 59.6 (12.9) ----------------------- Second, write an equation to do the calculation. cancer_clean %&gt;% dplyr::mutate(agez = (age - 59.6) / 12.9) %&gt;% dplyr::select(id, trt, age, agez) # A tibble: 25 x 4 id trt age agez &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 Placebo 52.0 -0.589 2 5 Placebo 77.0 1.35 3 6 Placebo 60.0 0.0310 4 9 Placebo 61.0 0.109 5 11 Placebo 59.0 -0.0465 6 15 Placebo 69.0 0.729 7 21 Placebo 67.0 0.574 8 26 Placebo 56.0 -0.279 9 31 Placebo 61.0 0.109 10 35 Placebo 51.0 -0.667 # ... with 15 more rows 4.2 Standardize Variables - with the scale() funciton A quicker way is to use a funciton. Notice the differences due to rounding. cancer_new &lt;- cancer_clean %&gt;% dplyr::mutate(agez = (age - 59.6) / 12.9) %&gt;% dplyr::mutate(ageZ = scale(age))%&gt;% dplyr::select(id, trt, age, agez, ageZ) cancer_new # A tibble: 25 x 5 id trt age agez ageZ &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 Placebo 52.0 -0.589 -0.591 2 5 Placebo 77.0 1.35 1.34 3 6 Placebo 60.0 0.0310 0.0278 4 9 Placebo 61.0 0.109 0.105 5 11 Placebo 59.0 -0.0465 -0.0495 6 15 Placebo 69.0 0.729 0.724 7 21 Placebo 67.0 0.574 0.569 8 26 Placebo 56.0 -0.279 -0.281 9 31 Placebo 61.0 0.109 0.105 10 35 Placebo 51.0 -0.667 -0.668 # ... with 15 more rows You can check that the new variable does in deed have mean of zero and spread of one. cancer_new %&gt;% furniture::table1(age, agez, ageZ, digits = 8) -------------------------------- Mean/Count (SD/%) n = 25 age 59.64000000 (12.93213053) agez 0.00310078 (1.00249074) ageZ -0.00000000 (1.00000000) -------------------------------- Both the mean and the standard deviation are different. cancer_new %&gt;% tidyr::gather(key = &quot;variable&quot;, value = &quot;value&quot;, age, ageZ) %&gt;% ggplot(aes(value)) + geom_histogram(bins = 8) + facet_grid(. ~ variable) However, if you let the scale of the x-axis change, you see the shape of the two variables is identical. cancer_new %&gt;% tidyr::gather(key = &quot;variable&quot;, value = &quot;value&quot;, age, ageZ) %&gt;% ggplot(aes(value)) + geom_histogram(bins = 8) + facet_grid(. ~ variable, scale = &quot;free_x&quot;) "],
["testing-normality.html", "Chapter 5 TESTING NORMALITY 5.1 Skewness &amp; Kurtosis 5.2 Shapiro-Wilk’s Test 5.3 Histogram 5.4 Q-Q Plot", " Chapter 5 TESTING NORMALITY Chapter Links Chapter 5 Slide Show Cancer Dataset - SPSS format Assignment Links Unit 2 Assignment - Write Up Skeleton Unit 2 Assignment - Rmd Skeleton Inho’s Dataset - Excel format Required Packages library(tidyverse) # Loads several very helpful &#39;tidy&#39; packages library(haven) # Read in SPSS datasets library(psych) # Lots of nice tid-bits Example: Cancer Experiment The Cancer dataset was introduced in chapter 3. 5.1 Skewness &amp; Kurtosis The psych::describe() function may be used to calculate skewness and kurtosis. cancer_clean %&gt;% dplyr::select(age, totalcw4) %&gt;% psych::describe() vars n mean sd median trimmed mad min max range skew age 1 25 59.64 12.93 60 59.95 11.86 27 86 59 -0.31 totalcw4 2 25 10.36 3.47 10 10.19 2.97 6 17 11 0.49 kurtosis se age -0.01 2.59 totalcw4 -1.00 0.69 5.2 Shapiro-Wilk’s Test The shapiro.test() function is used to test for normality in a small’ish sample. This function is meant to be applied to a single variable in vector form, thus precede it with a dplyr::pull() step. If \\(p-value \\gt \\alpha\\), then the sample does NOT provide evidence the population is non-normally distributed. cancer_clean %&gt;% dplyr::pull(age) %&gt;% shapiro.test() Shapiro-Wilk normality test data: . W = 0.98317, p-value = 0.9399 If \\(p-value \\lt \\alpha\\), then the sample DOES provide evidence the population is non-normally distributed. cancer_clean %&gt;% dplyr::pull(totalcw4) %&gt;% shapiro.test() Shapiro-Wilk normality test data: . W = 0.9131, p-value = 0.03575 5.3 Histogram Histograms provide a visual way to determine if a data are approximately normally distributed. Look for a ‘bell’ shape. cancer_clean %&gt;% ggplot(aes(age)) + geom_histogram(binwidth = 5) cancer_clean %&gt;% ggplot(aes(totalcw4)) + geom_histogram(binwidth = 1) 5.4 Q-Q Plot Quantile-quantile plots also help visually determine if data are approximately normally distributed. Look for the points to fall on a straight \\(45 \\degree\\) line. cancer_clean %&gt;% ggplot(aes(sample = age)) + geom_qq() cancer_clean %&gt;% ggplot(aes(sample = totalcw4)) + geom_qq() "],
["t-test-for-the-mean-of-1-sample.html", "Chapter 6 t TEST FOR THE MEAN OF 1 SAMPLE 6.1 1 Sample Mean vs. historic control 6.2 Change the Confidence Level 6.3 Restrict to a Subsample", " Chapter 6 t TEST FOR THE MEAN OF 1 SAMPLE Chapter Links Chapter 6 Slide Show Interactive Online App - Confidence Intervals Cancer Dataset - SPSS format Assignment Links Unit 2 Assignment - Write Up Skeleton Unit 2 Assignment - Rmd Skeleton Inho’s Dataset - Excel format Required Packages library(tidyverse) # Loads several very helpful &#39;tidy&#39; packages library(haven) # Read in SPSS datasets Example: Cancer Experiment The Cancer dataset was introduced in chapter 3. 6.1 1 Sample Mean vs. historic control example: Do the patients weigh more than 165 pounds at intake, on average? cancer_clean %&gt;% dplyr::pull(weighin) %&gt;% t.test(mu = 165) One Sample t-test data: . t = 2.0765, df = 24, p-value = 0.04872 alternative hypothesis: true mean is not equal to 165 95 percent confidence interval: 165.0807 191.4793 sample estimates: mean of x 178.28 6.2 Change the Confidence Level Find a 99% confience level for the population mean weight. cancer_clean %&gt;% dplyr::pull(weighin) %&gt;% t.test(mu = 165, conf.level = 0.99) One Sample t-test data: . t = 2.0765, df = 24, p-value = 0.04872 alternative hypothesis: true mean is not equal to 165 99 percent confidence interval: 160.3927 196.1673 sample estimates: mean of x 178.28 6.3 Restrict to a Subsample Do the patients with .dcoral[stage 3 &amp; 4] cancer weigh more than 165 pounds at intake, on average? cancer_clean %&gt;% dplyr::filter(stage %in% c(&quot;3&quot;, &quot;4&quot;)) %&gt;% dplyr::pull(weighin) %&gt;% t.test(mu = 165) One Sample t-test data: . t = 0.82627, df = 5, p-value = 0.4463 alternative hypothesis: true mean is not equal to 165 95 percent confidence interval: 137.0283 219.4717 sample estimates: mean of x 178.25 "],
["t-test-for-the-difference-in-2-means-independent-samples.html", "Chapter 7 t TEST FOR THE DIFFERENCE IN 2 MEANS, INDEPENDENT SAMPLES 7.1 Assumtion Check: Eyeball method 7.2 Assumtion Check: Homogeneity of Variance 7.3 2 independent Sample Means", " Chapter 7 t TEST FOR THE DIFFERENCE IN 2 MEANS, INDEPENDENT SAMPLES Chapter Links Chapter 7 Slide Show (pdf) Cancer Dataset - SPSS format Assignment Links Unit 2 Assignment - Write Up Skeleton Unit 2 Assignment - Rmd Skeleton Inho’s Dataset - Excel format Required Packages library(tidyverse) # Loads several very helpful &#39;tidy&#39; packages library(haven) # Read in SPSS datasets library(car) # Companion for Applied Regression (and ANOVA) Example: Cancer Experiment The Cancer dataset was introduced in chapter 3. Check Means and SD’s cancer_clean %&gt;% dplyr::group_by(trt) %&gt;% furniture::table1(totalcin, totalcw4) -------------------------------- trt Placebo Aloe Juice n = 14 n = 11 totalcin 6.6 (0.9) 6.5 (2.1) totalcw4 10.1 (3.6) 10.6 (3.5) -------------------------------- 7.1 Assumtion Check: Eyeball method Do the two groups, treatment and control, have the same amount of spread (standard deviations) BUT different centers (means)? cancer_clean %&gt;% ggplot(aes(x = trt, y = totalcin)) + geom_boxplot() cancer_clean %&gt;% ggplot(aes(x = trt, y = totalcw4)) + geom_boxplot() 7.2 Assumtion Check: Homogeneity of Variance Before performing the \\(t\\) test, check to see if the assumption of homogeneity of variance is met using Levene’s Test. For a independent samples t-test for means, the groups need to have the same amount of spread (SD) in the measure of interest. Use the car:leveneTest() function to do this. Inside the funtion you need to specify at least three things (sepearated by commas): the formula: continuous_var ~ grouping_var (replace with your variable names) the dataset: data = . to pipe it from above the center: center = &quot;mean&quot; since we are comparing means Do the participants in the treatment and control groups have the same spread in oral condition at BASELINE? cancer_clean %&gt;% car::leveneTest(totalcin ~ trt, # formula: continuous_var ~ grouping_var data = ., # pipe in the dataset center = &quot;mean&quot;) # The default is &quot;median&quot; Levene&#39;s Test for Homogeneity of Variance (center = &quot;mean&quot;) Df F value Pr(&gt;F) group 1 2.2103 0.1507 23 No violations of homogeneity were detected, \\(F(1, 23) = 2.210, p = .151\\). Do the participants in the treatment and control groups have the same spread in oral condition at the FOURTH WEEK? cancer_clean %&gt;% car::leveneTest(totalcw4 ~ trt, # formula: continuous_var ~ grouping_var data = ., # pipe in the dataset center = &quot;mean&quot;) # The default is &quot;median&quot; Levene&#39;s Test for Homogeneity of Variance (center = &quot;mean&quot;) Df F value Pr(&gt;F) group 1 0 0.995 23 No violations of homogeneity were detected, \\(F(1, 23) = 0, p = .995\\). 7.3 2 independent Sample Means Use the same t.test() funtion we have used in the prior chapters. This time you need to speficy a few more options. the formula: continuous_var ~ grouping_var (replace with your variable names) the dataset: data = . to pipe it from above is homogeneity satified?: var.equal = TRUE (NOT the default) number of tails: alternative = &quot;two.sided&quot; independent vs. paired: paired = FALSE confidence level: conf.level = # Do the participants in the treatment group have a different average oral condition at BASELINE, compared to the control group? # Minimal syntax cancer_clean %&gt;% t.test(totalcin ~ trt, # formula: continuous_var ~ grouping_var data = ., # pipe in the dataset var.equal = TRUE) # HOV was violated (option = TRUE) Two Sample t-test data: totalcin by trt t = 0.18566, df = 23, p-value = 0.8543 alternative hypothesis: true difference in means is not equal to 0 95 percent confidence interval: -1.185479 1.419245 sample estimates: mean in group Placebo mean in group Aloe Juice 6.571429 6.454545 No evidence of a differnece in mean oral condition at baseline, \\(t(23) = 0.186, p = .854\\). Do the participants in the treatment group have a different average oral condition at the FOURTH WEEK, compared to the control group? # Fully specified function cancer_clean %&gt;% t.test(totalcw4 ~ trt, # formula: continuous_var ~ grouping_var data = ., # pipe in the dataset var.equal = TRUE, # default: HOV was violated (option = TRUE) alternative = &quot;two.sided&quot;, # default: 2 sided (options = &quot;less&quot;, &quot;greater&quot;) paired = FALSE, # default: independent (option = TRUE) conf.level = .95) # default: 95% (option = .9, .90, ect.) Two Sample t-test data: totalcw4 by trt t = -0.34598, df = 23, p-value = 0.7325 alternative hypothesis: true difference in means is not equal to 0 95 percent confidence interval: -3.444215 2.457202 sample estimates: mean in group Placebo mean in group Aloe Juice 10.14286 10.63636 No evidence of a differnece in mean oral condition at the fourth week, \\(t(23) = -0.350, p = .733\\). "],
["power-and-effect-size.html", "Chapter 8 Power and Effect Size 8.1 Power Analysis", " Chapter 8 Power and Effect Size Chapter Links Chapter 8 Slide Show (pdf) Interactive Online App Assignment Links Unit 2 Assignment - Write Up Skeleton Unit 2 Assignment - Rmd Skeleton Inho’s Dataset - Excel format 8.1 Power Analysis We will use G Power for class and on the assingment. Download it for free (Mac or PC) at: http://www.gpower.hhu.de/ "],
["linear-correlation.html", "Chapter 9 Linear Correlation 9.1 Calculating Pearson’s Correlation Coefficient", " Chapter 9 Linear Correlation Chapter Links Chapter 9 Slide Show (pdf) Interactive Online App Cancer Dataset - SPSS format Assignment Links Unit 3 Assignment - Write Up Skeleton .pdf Unit 3 Assignment - R Directions .pdf Unit 3 Assignment - R Skeleton .Rmd Inho’s Dataset - Excel format Required Packages library(tidyverse) # Loads several very helpful &#39;tidy&#39; packages library(haven) # Read in SPSS datasets library(car) # Companion for Applied Regression (and ANOVA) Example: Cancer Experiment The Cancer dataset was introduced in chapter 3. Check Means and SD’s cancer_clean %&gt;% dplyr::group_by(trt) %&gt;% furniture::table1(totalcin, totalcw4) -------------------------------- trt Placebo Aloe Juice n = 14 n = 11 totalcin 6.6 (0.9) 6.5 (2.1) totalcw4 10.1 (3.6) 10.6 (3.5) -------------------------------- 9.1 Calculating Pearson’s Correlation Coefficient "],
["linear-regression.html", "Chapter 10 Linear Regression 10.1 Checking ASsumptions", " Chapter 10 Linear Regression Chapter Links Chapter 9 Slide Show (pdf) Interactive Online App Cancer Dataset - SPSS format Assignment Links Unit 3 Assignment - Write Up Skeleton .pdf Unit 3 Assignment - R Directions .pdf Unit 3 Assignment - R Skeleton .Rmd Inho’s Dataset - Excel format Required Packages library(tidyverse) # Loads several very helpful &#39;tidy&#39; packages library(haven) # Read in SPSS datasets library(car) # Companion for Applied Regression (and ANOVA) Example: Cancer Experiment The Cancer dataset was introduced in chapter 3. Check Means and SD’s cancer_clean %&gt;% dplyr::group_by(trt) %&gt;% furniture::table1(totalcin, totalcw4) -------------------------------- trt Placebo Aloe Juice n = 14 n = 11 totalcin 6.6 (0.9) 6.5 (2.1) totalcw4 10.1 (3.6) 10.6 (3.5) -------------------------------- 10.1 Checking ASsumptions "],
["t-test-for-the-difference-in-2-paired-means.html", "Chapter 11 t TEST FOR THE DIFFERENCE IN 2 PAIRED MEANS 11.1 Checking ASsumptions", " Chapter 11 t TEST FOR THE DIFFERENCE IN 2 PAIRED MEANS Chapter Links Chapter 11 Slide Show (pdf) Cancer Dataset - SPSS format Assignment Links Unit 3 Assignment - Write Up Skeleton .pdf Unit 3 Assignment - R Directions .pdf Unit 3 Assignment - R Skeleton .Rmd Inho’s Dataset - Excel format Required Packages library(tidyverse) # Loads several very helpful &#39;tidy&#39; packages library(haven) # Read in SPSS datasets library(car) # Companion for Applied Regression (and ANOVA) Example: Cancer Experiment The Cancer dataset was introduced in chapter 3. Check Means and SD’s cancer_clean %&gt;% dplyr::group_by(trt) %&gt;% furniture::table1(totalcin, totalcw4) -------------------------------- trt Placebo Aloe Juice n = 14 n = 11 totalcin 6.6 (0.9) 6.5 (2.1) totalcw4 10.1 (3.6) 10.6 (3.5) -------------------------------- 11.1 Checking ASsumptions "],
["references.html", "REFERENCES", " REFERENCES "]
]
